server:
  port: 8089
  servlet:
    context-path: /demo

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/test0815?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
  
  # Spring Boot Admin Client 配置
  boot:
    admin:
      client:
        # Admin Server 地址（先配置为本地，后面启动 Admin Server 后可以看到这个客户端）
        url: http://localhost:8090
        # 应用实例信息
        instance:
          name: ${spring.application.name:demo-swagger}
          service-url: http://localhost:${server.port}${server.servlet.context-path:/}
          management-url: http://localhost:${server.port}${server.servlet.context-path:/}actuator
          health-url: http://localhost:${server.port}${server.servlet.context-path:/}actuator/health
          metadata:
            tags:
              environment: development
              team: demo-team
  
  # 应用信息配置
  application:
    name: demo-swagger

  # Quartz定时任务配置
  quartz:
    # 调度器名称
    scheduler-name: demo-scheduler
    # 启动时等待
    startup-delay: 5s
    # 自动启动
    auto-startup: true
    # 应用关闭时等待任务完成
    wait-for-jobs-to-complete-on-shutdown: true
    # 覆盖已存在的任务
    overwrite-existing-jobs: true
    # 任务存储方式：使用内存存储（适合开发和体验）
    job-store-type: memory
    # 属性配置
    properties:
      org:
        quartz:
          scheduler:
            instanceName: demo-scheduler
            instanceId: AUTO
          jobStore:
            # 使用内存存储
            class: org.quartz.simpl.RAMJobStore
          threadPool:
            # 简单线程池
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true

  # Thymeleaf模板配置
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    encoding: UTF-8
    mode: HTML
    cache: false

  # Redis配置
  redis:
    # Redis服务器地址
    host: localhost
    # Redis服务器端口
    port: 6379
    # Redis服务器密码（默认为空）
    password: 
    # 数据库索引（默认为0）
    database: 0
    # 连接超时时间（毫秒）
    timeout: 5000ms
    # Lettuce连接池配置
    lettuce:
      pool:
        # 连接池最大连接数
        max-active: 20
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池超时时间
        time-between-eviction-runs: 30s

  # 缓存配置
  cache:
    # 缓存类型
    type: redis
    # 缓存名称
    cache-names: 
      - userCache
      - dataCache
      - tempCache
    redis:
      # 缓存过期时间（单位：毫秒）
      time-to-live: 600000  # 10分钟
      # 是否缓存空值
      cache-null-values: true
      # Key前缀
      key-prefix: "demo:cache:"
      # 是否使用Key前缀
      use-key-prefix: true

# Actuator 监控端点配置
management:
  endpoints:
    web:
      exposure:
        # 暴露所有端点（生产环境建议只暴露必要的端点）
        include: "*"
      base-path: /actuator
      # 允许跨域
      cors:
        allowed-origins: "*"
        allowed-methods: GET,POST
  endpoint:
    health:
      # 显示详细健康信息
      show-details: always
      show-components: always
    # 启用 shutdown 端点（生产环境谨慎使用）
    shutdown:
      enabled: true
  info:
    # 启用各种信息收集
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  metrics:
    export:
      # 启用指标导出
      simple:
        enabled: true

# 应用信息（会显示在 /actuator/info 端点）
info:
  app:
    name: ${spring.application.name}
    description: "Spring Boot Swagger Demo with MySQL"
    version: "1.0.0-SNAPSHOT"
    encoding: "UTF-8"
    java:
      version: ${java.version}
  build:
    timestamp: "@timestamp@"
  contact:
    email: "demo@example.com"
    phone: "123-456-7890"

# JWT 配置
jwt:
  # JWT 签名密钥（生产环境请使用更复杂的密钥）
  secret: demo-swagger-security-jwt-secret-key-2024-very-long-secret
  # JWT 访问令牌过期时间（小时）
  expiration: 24
  # JWT 刷新令牌过期时间（天）
  refresh-expiration: 7